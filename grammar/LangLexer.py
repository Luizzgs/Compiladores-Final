# Generated from Lang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,229,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,
        3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,
        1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,
        1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,
        1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,
        1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,
        1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,5,33,185,8,33,10,33,12,33,
        188,9,33,1,33,1,33,1,34,1,34,1,35,4,35,195,8,35,11,35,12,35,196,
        1,35,1,35,4,35,201,8,35,11,35,12,35,202,3,35,205,8,35,1,36,1,36,
        5,36,209,8,36,10,36,12,36,212,9,36,1,37,1,37,5,37,216,8,37,10,37,
        12,37,219,9,37,1,37,1,37,1,38,4,38,224,8,38,11,38,12,38,225,1,38,
        1,38,0,0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,73,37,75,38,77,39,1,0,20,2,0,87,87,119,119,2,0,
        72,72,104,104,2,0,73,73,105,105,2,0,76,76,108,108,2,0,69,69,101,
        101,2,0,68,68,100,100,2,0,79,79,111,111,2,0,70,70,102,102,2,0,82,
        82,114,114,2,0,85,85,117,117,2,0,78,78,110,110,2,0,67,67,99,99,2,
        0,84,84,116,116,2,0,83,83,115,115,1,0,34,34,1,0,48,57,3,0,65,90,
        95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,0,9,
        10,13,13,32,32,235,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
        0,1,79,1,0,0,0,3,86,1,0,0,0,5,92,1,0,0,0,7,94,1,0,0,0,9,96,1,0,0,
        0,11,98,1,0,0,0,13,100,1,0,0,0,15,102,1,0,0,0,17,104,1,0,0,0,19,
        106,1,0,0,0,21,108,1,0,0,0,23,110,1,0,0,0,25,112,1,0,0,0,27,115,
        1,0,0,0,29,118,1,0,0,0,31,120,1,0,0,0,33,123,1,0,0,0,35,125,1,0,
        0,0,37,127,1,0,0,0,39,130,1,0,0,0,41,133,1,0,0,0,43,136,1,0,0,0,
        45,138,1,0,0,0,47,140,1,0,0,0,49,142,1,0,0,0,51,148,1,0,0,0,53,151,
        1,0,0,0,55,155,1,0,0,0,57,164,1,0,0,0,59,167,1,0,0,0,61,172,1,0,
        0,0,63,177,1,0,0,0,65,180,1,0,0,0,67,182,1,0,0,0,69,191,1,0,0,0,
        71,194,1,0,0,0,73,206,1,0,0,0,75,213,1,0,0,0,77,223,1,0,0,0,79,80,
        5,110,0,0,80,81,5,117,0,0,81,82,5,109,0,0,82,83,5,101,0,0,83,84,
        5,114,0,0,84,85,5,111,0,0,85,2,1,0,0,0,86,87,5,116,0,0,87,88,5,101,
        0,0,88,89,5,120,0,0,89,90,5,116,0,0,90,91,5,111,0,0,91,4,1,0,0,0,
        92,93,5,40,0,0,93,6,1,0,0,0,94,95,5,41,0,0,95,8,1,0,0,0,96,97,5,
        123,0,0,97,10,1,0,0,0,98,99,5,125,0,0,99,12,1,0,0,0,100,101,5,61,
        0,0,101,14,1,0,0,0,102,103,5,44,0,0,103,16,1,0,0,0,104,105,5,43,
        0,0,105,18,1,0,0,0,106,107,5,45,0,0,107,20,1,0,0,0,108,109,5,42,
        0,0,109,22,1,0,0,0,110,111,5,47,0,0,111,24,1,0,0,0,112,113,5,38,
        0,0,113,114,5,38,0,0,114,26,1,0,0,0,115,116,5,124,0,0,116,117,5,
        124,0,0,117,28,1,0,0,0,118,119,5,33,0,0,119,30,1,0,0,0,120,121,5,
        61,0,0,121,122,5,61,0,0,122,32,1,0,0,0,123,124,5,60,0,0,124,34,1,
        0,0,0,125,126,5,62,0,0,126,36,1,0,0,0,127,128,5,60,0,0,128,129,5,
        61,0,0,129,38,1,0,0,0,130,131,5,62,0,0,131,132,5,61,0,0,132,40,1,
        0,0,0,133,134,5,33,0,0,134,135,5,61,0,0,135,42,1,0,0,0,136,137,5,
        128077,0,0,137,44,1,0,0,0,138,139,5,128078,0,0,139,46,1,0,0,0,140,
        141,5,129300,0,0,141,48,1,0,0,0,142,143,7,0,0,0,143,144,7,1,0,0,
        144,145,7,2,0,0,145,146,7,3,0,0,146,147,7,4,0,0,147,50,1,0,0,0,148,
        149,7,5,0,0,149,150,7,6,0,0,150,52,1,0,0,0,151,152,7,7,0,0,152,153,
        7,6,0,0,153,154,7,8,0,0,154,54,1,0,0,0,155,156,7,7,0,0,156,157,7,
        9,0,0,157,158,7,10,0,0,158,159,7,11,0,0,159,160,7,12,0,0,160,161,
        7,2,0,0,161,162,7,6,0,0,162,163,7,10,0,0,163,56,1,0,0,0,164,165,
        5,8617,0,0,165,166,5,65039,0,0,166,58,1,0,0,0,167,168,7,12,0,0,168,
        169,7,1,0,0,169,170,7,4,0,0,170,171,7,10,0,0,171,60,1,0,0,0,172,
        173,7,4,0,0,173,174,7,3,0,0,174,175,7,13,0,0,175,176,7,4,0,0,176,
        62,1,0,0,0,177,178,5,9999,0,0,178,179,5,65039,0,0,179,64,1,0,0,0,
        180,181,5,128214,0,0,181,66,1,0,0,0,182,186,5,34,0,0,183,185,8,14,
        0,0,184,183,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,
        0,0,187,189,1,0,0,0,188,186,1,0,0,0,189,190,5,34,0,0,190,68,1,0,
        0,0,191,192,5,59,0,0,192,70,1,0,0,0,193,195,7,15,0,0,194,193,1,0,
        0,0,195,196,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,204,1,0,
        0,0,198,200,9,0,0,0,199,201,7,15,0,0,200,199,1,0,0,0,201,202,1,0,
        0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,205,1,0,0,0,204,198,1,0,
        0,0,204,205,1,0,0,0,205,72,1,0,0,0,206,210,7,16,0,0,207,209,7,17,
        0,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,
        0,0,211,74,1,0,0,0,212,210,1,0,0,0,213,217,5,128172,0,0,214,216,
        8,18,0,0,215,214,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,
        1,0,0,0,218,220,1,0,0,0,219,217,1,0,0,0,220,221,6,37,0,0,221,76,
        1,0,0,0,222,224,7,19,0,0,223,222,1,0,0,0,224,225,1,0,0,0,225,223,
        1,0,0,0,225,226,1,0,0,0,226,227,1,0,0,0,227,228,6,38,0,0,228,78,
        1,0,0,0,8,0,186,196,202,204,210,217,225,1,6,0,0
    ]

class LangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    OE = 3
    CE = 4
    OB = 5
    CB = 6
    AT = 7
    SEP = 8
    PLUS = 9
    MINUS = 10
    MULT = 11
    DIV = 12
    AND = 13
    OR = 14
    NOT = 15
    EQ = 16
    LT = 17
    GT = 18
    LE = 19
    GE = 20
    NE = 21
    BOOL_TRUE = 22
    BOL_FALSE = 23
    IF = 24
    WHILE = 25
    DO = 26
    FOR = 27
    FUNCTION = 28
    RETURN = 29
    THEN = 30
    ELSE = 31
    WRITE = 32
    READ = 33
    STR = 34
    EOL = 35
    NUM = 36
    VAR = 37
    COMMENT = 38
    WS = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'numero'", "'texto'", "'('", "')'", "'{'", "'}'", "'='", "','", 
            "'+'", "'-'", "'*'", "'/'", "'&&'", "'||'", "'!'", "'=='", "'<'", 
            "'>'", "'<='", "'>='", "'!='", "'\\U0001F44D'", "'\\U0001F44E'", 
            "'\\U0001F914'", "'\\u21A9\\uFE0F'", "'\\u270F\\uFE0F'", "'\\U0001F4D6'", 
            "';'" ]

    symbolicNames = [ "<INVALID>",
            "OE", "CE", "OB", "CB", "AT", "SEP", "PLUS", "MINUS", "MULT", 
            "DIV", "AND", "OR", "NOT", "EQ", "LT", "GT", "LE", "GE", "NE", 
            "BOOL_TRUE", "BOL_FALSE", "IF", "WHILE", "DO", "FOR", "FUNCTION", 
            "RETURN", "THEN", "ELSE", "WRITE", "READ", "STR", "EOL", "NUM", 
            "VAR", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "OE", "CE", "OB", "CB", "AT", "SEP", "PLUS", 
                  "MINUS", "MULT", "DIV", "AND", "OR", "NOT", "EQ", "LT", 
                  "GT", "LE", "GE", "NE", "BOOL_TRUE", "BOL_FALSE", "IF", 
                  "WHILE", "DO", "FOR", "FUNCTION", "RETURN", "THEN", "ELSE", 
                  "WRITE", "READ", "STR", "EOL", "NUM", "VAR", "COMMENT", 
                  "WS" ]

    grammarFileName = "Lang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


